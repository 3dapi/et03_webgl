<html>
<head>
<title>GLC WebGL</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script language="javascript" type="text/javascript" src="./webgl_util.js"></script>
<script language="javascript" type="text/javascript" src="rsc/gsd_geo.js"></script>

<script id="shader-vs" type="x-shader/x-vertex">
	attribute vec4      at_pos;									//  1
	attribute vec2      at_tex;									//  2
																//  3
	varying   vec2      vr_tex;									//  4
																//  5
	void main() {												//  6
		gl_Position = at_pos;									//  7
																//  8
		vr_tex = at_tex;										//  9
	}
</script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision highp float;										//  1
																//  2
	varying   vec2      vr_tex;									//  3
																//  4
	uniform   sampler2D us_t0;									//  5	// sampler 0
	uniform   sampler2D us_t1;									//  6	// sampler 1
																//  7
	uniform   int       uc_op;									//  8	// multi-texturing blending operation
																//  9
	void main() {												// 10
		vec4	ret = vec4(0.0, 0.0, 0.0, 1.0);					//  1
		vec4	ct0 = texture2D(us_t0, vr_tex);					//  2	// sampling
		vec4	ct1 = texture2D(us_t1, vr_tex);					//  3
																//  4
		if     ( 0== uc_op) ret = ct0;							//  5
		else if( 1== uc_op) ret = ct1;							//  6
		else if( 2== uc_op) ret = ct0 * ct1;					//  7   Modulate
		else if( 3== uc_op) ret = ct0 * ct1 * 2.0;				//  8   Modulate 2x
		else if( 4== uc_op) ret = ct0 * ct1 * 4.0;				//  9   Modulate 4x
		else if( 5== uc_op) ret = ct0 + ct1;					// 20	Add
		else if( 6== uc_op) ret = ct0 + ct1 - 0.5;				//  1	Add signed
		else if( 7== uc_op) ret =(ct0 + ct1 - 0.5)*2.0;			//  2   Add signed 2x
		else if( 8== uc_op) ret = ct0 + ct1 - ct0*ct1;			//  3	Add smooth
		else if( 9== uc_op) ret = ct0 - ct1;					//  4   Sub
		else if(10== uc_op) ret = ct1 - ct0;					//  5   Sub
		else if(11== uc_op) ret = 1.0 - ct0;					//  6	Inverse ct0
		else if(12== uc_op) ret = 1.0 - ct1;					//  7   Inverse ct1
		else if(13== uc_op) ret = 1.0 - (ct0 + ct1);			//  8   Inverse (ct0+ct1)
		else if(14== uc_op) ret = 1.0 - ct0 * ct1;				//  9
		else if(15== uc_op) ret = (ct0 + ct1) * 0.5;				// 30
																//  1
		gl_FragColor = ret;										//  2
		gl_FragColor.a = 1.0;									//  3
	}															//  4
</script>


<script type="text/javascript">

// global common variable

var gl;											// gl context object
var mouse = {x: 0, y: 0};						// mouse position

var g_program;									// shader program

var vbo_pos = new Array(16);
var vbo_tex;

var tex_stones;
var tex_lamplight;

function WebGLInit(native_win)
{
	native_win.addEventListener('mousemove', function(e)
	{
		var rect = native_win.getBoundingClientRect();

		mouse.x = e.clientX - rect.left;
		mouse.y = e.clientY - rect.top;

		//document.title= "mouse: " + mouse.x + ", " + mouse.y;
	}, false);

	window.addEventListener('keydown', function(e)
	{
		//document.title= "Keycode: " + e.keyCode;
	}, true);

	setInterval("WebGLRender()", 0);

	gl.clearColor(0.0, 0.4, 0.6, 1.0);


	// create program
	g_program = CreateProgram(gl, "shader-vs", "shader-fs");
	if(null == g_program)
		return;


	// create VBO
	var vtx_tex =
	[
		 0.0, 1.0,
		 1.0, 1.0,
		 1.0, 0.0,
		 0.0, 0.0,
	];

	vbo_tex   = CreateVbo(gl, vtx_tex  );

	for(var j=0; j<4; ++j)
	{
		for(var i=0; i<4; ++i)
		{
			var	x =	-1.0 + i * 0.5;
			var	y = -1.0 + j * 0.5;

			var vtx_pos =
			[
				x    , y,
				x+0.5, y,
				x+0.5, y+0.5,
				x    , y+0.5,
			];

			vbo_pos[j*4+i] = CreateVbo(gl, vtx_pos );
		}
	}


	// create toon texture
	tex_stones    = CreateTexture("rsc/stones.png");
	tex_lamplight = CreateTexture("rsc/lamplight.png");
}

function WebGLRender()
{
	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	gl.enable( gl.DEPTH_TEST);
	gl.disable( gl.CULL_FACE);


	UsePrgram(gl, g_program);

	ActiveTexture(gl, g_program, tex_stones   , 0, "us_t0");
	ActiveTexture(gl, g_program, tex_lamplight, 1, "us_t1");

	AttributeStream(gl, 1, vbo_tex , 2);

	for(var j=0; j<4; ++j)
	{
		for(var i=0; i<4; ++i)
		{
			var idx = j*4 +i;
			UniformInt(gl, g_program, "uc_op", idx);
			AttributeStream(gl, 0, vbo_pos[idx], 2);
			DrawArray(gl, gl.TRIANGLE_FAN, 0, 4);
		}
	}

	AttributeStream(gl, 0, null, 0);
	AttributeStream(gl, 1, null, 0);

	ActiveTexture(gl, g_program, null, 0);
	ActiveTexture(gl, g_program, null, 1);

	UsePrgram(gl, null);

	gl.flush();
}


function WebGLStart()
{
	var native_win = CreateNativeWindow("canvas", 800, 480);

	gl = CreateContext(native_win);
	if(!gl)
	{
		alert("Could not initialise WebGL. check the browser");
		return;
	}

	WebGLInit(native_win);
}
</script>
</head>

<body onload="WebGLStart();">
</body>
</html>
