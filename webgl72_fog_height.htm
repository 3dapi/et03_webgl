<html>
<head>
<title>GLC WebGL</title>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">

<script language="javascript" type="text/javascript" src="./webgl_util.js"></script>
<script language="javascript" type="text/javascript" src="rsc/gsd_geo.js"></script>

<script id="shader-vs" type="x-shader/x-vertex">
	attribute vec4      at_pos;
	attribute vec3      at_nor;

	varying   vec3      vr_nor;
	varying   vec3      vr_eye;

	varying   float     vr_fog;							// fog weight

	uniform   mat4      um_Wld;
	uniform   mat4      um_Viw;
	uniform   mat4      um_Prj;
	uniform   vec3      uf_cam;

	uniform   float     fog_rng;						// fog range

	void main() {
		vec4 pos    = um_Wld * at_pos;

		vr_nor      = vec3(um_Wld * vec4(at_nor, 0.0));
		vr_eye      = uf_cam - vec3(pos);

		vr_fog      = 1.0 - pos.y/fog_rng;
		vr_fog		= clamp(vr_fog, 0.0, 1.0);
		vr_fog		= vr_fog * vr_fog;

		pos         = um_Viw * pos;
		pos         = um_Prj * pos;
		gl_Position = pos;
	}
</script>

<script id="shader-fs" type="x-shader/x-fragment">
    precision mediump float;

	varying   vec3      vr_nor;
	varying   vec3      vr_eye;

	varying   float     vr_fog;							// fog weight

	uniform   vec3      lgt_dir;
	uniform   vec4      lgt_dif;

	uniform   vec4      fog_dif;						// fog color

    void main() {
		vec3 nor    = normalize(vr_nor);
		vec3 eye    = normalize(vr_eye);

		float spc = (dot(reflect(lgt_dir, nor), eye) + 1.0) *0.5;
			  spc = clamp(spc, 0.0, 1.0);
			  spc = pow(spc, 50.0)* 0.8;

		float lam = (dot(-lgt_dir, nor) + 1.0) * 0.4;
		float lgt = lam + spc;

		gl_FragColor.rgb = lgt_dif.rgb * lgt * (1.0 - vr_fog) + fog_dif.rgb * vr_fog;

		gl_FragColor.a   = lgt_dif.a;
    }
</script>


<script type="text/javascript">

// global common variable

var gl;											// gl context object
var mouse = {x: 0, y: 0};						// mouse position

var g_program;									// shader program

var vbo_pos;
var vbo_nor;
var ibo_idx ;									// front face

var cam_pos = [0, 20, -30];
var cam_look= [0, 0,   0 ];

function WebGLInit(native_win)
{
	native_win.addEventListener('mousemove', function(e)
	{
		var rect = native_win.getBoundingClientRect();

		mouse.x = e.clientX - rect.left;
		mouse.y = e.clientY - rect.top;

		//document.title= "mouse: " + mouse.x + ", " + mouse.y;
	}, false);

	window.addEventListener('keydown', function(e)
	{
		//document.title= "Keycode: " + e.keyCode;

		if(87 == e.keyCode){ cam_pos [2] += 1.0;	cam_look[2] += 1.0; }	//'W'
		if(83 == e.keyCode){ cam_pos [2] -= 1.0;	cam_look[2] -= 1.0; }	//'S'
		if(65 == e.keyCode){ cam_pos [0] -= 1.0;	cam_look[0] -= 1.0; }	//'A'
		if(68 == e.keyCode){ cam_pos [0] += 1.0;	cam_look[0] += 1.0; }	//'D'
	}, true);

	setInterval("WebGLRender()", 0);

	gl.clearColor(0.0, 0.6, 0.8, 1.0);


	// create program
	g_program = CreateProgram(gl, "shader-vs", "shader-fs");
	if(null == g_program)
		return;


	// create VBO and IBO
	vbo_pos  = CreateVbo(gl, gsd_buf_pos );
	vbo_nor  = CreateVbo(gl, gsd_buf_nor );
	ibo_idx  = CreateIbo(gl, gsd_buf_idx );
}



var angle = 0.0;

function WebGLRender()
{
	gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	gl.enable( gl.DEPTH_TEST);												// enable depth test
	gl.disable( gl.CULL_FACE );												// enable culling face


	angle += 0.25;

	var rad = -angle * Math.PI/180.0;
	var cosF = Math.cos(rad);
	var sinF = Math.sin(rad);

	var um_Wld =
	[
		cosF , 0.0, sinF, 0.0,
		0.0  , 1.0, 0.0 , 0.0,
		-sinF, 0.0, cosF, 0.0,
		0.0  , 0.0, 0.0 , 1.0,
	];


	var um_Viw = GluLookAt(cam_pos[0], cam_pos[1], cam_pos[2], cam_look[0],cam_look[1], cam_look[2], 0,1,0);
	var um_Prj = GluPerspective(45.0, 800.0/480.0, 1.0, 5000.0);


	UsePrgram(gl, g_program);

	UniformMatrix(gl, g_program, "um_Wld", um_Wld);
	UniformMatrix(gl, g_program, "um_Viw", um_Viw);
	UniformMatrix(gl, g_program, "um_Prj", um_Prj);

	var lgt_dir = [0, -0.707,  0.707];
	UniformVec3(gl, g_program, "uf_cam", cam_pos);
	UniformVec3(gl, g_program, "lgt_dir", lgt_dir);


	var lgt_dif = [1.0, 1.0, 0.3, 1.0];
	UniformVec4(gl, g_program, "lgt_dif", lgt_dif);


	var fog_dif = [0.0, 0.6, 0.8, 1.0];
	UniformVec4(gl, g_program, "fog_dif", fog_dif);

	var fog_rng = 10.0;
	UniformFloat(gl, g_program, "fog_rng", fog_rng);



	AttributeStream(gl, 0, vbo_pos, 3);
	AttributeStream(gl, 1, vbo_nor, 3);

	BindIbo(gl, ibo_idx );
	DrawElement(gl, gl.TRIANGLES, gsd_buf_idx.length);

	AttributeStream(gl, 0, null, 0);
	AttributeStream(gl, 1, null, 0);
	BindIbo(gl, null);

	UsePrgram(gl, null);

	gl.flush();
}


function WebGLStart()
{
	var native_win = CreateNativeWindow("canvas", 800, 480);

	gl = CreateContext(native_win);
	if(!gl)
	{
		alert("Could not initialise WebGL. check the browser");
		return;
	}


	WebGLInit(native_win);
}
</script>
</head>

<body onload="WebGLStart();">
</body>
</html>
